package waa.mum.edu.config;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.context.annotation.Bean;
import org.springframework.context.annotation.Configuration;
import org.springframework.context.annotation.ImportResource;
import org.springframework.security.authentication.dao.DaoAuthenticationProvider;
import org.springframework.security.config.annotation.authentication.builders.AuthenticationManagerBuilder;
import org.springframework.security.config.annotation.web.builders.HttpSecurity;
import org.springframework.security.config.annotation.web.configuration.EnableWebSecurity;
import org.springframework.security.config.annotation.web.configuration.WebSecurityConfigurerAdapter;
import org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder;
import org.springframework.security.crypto.password.PasswordEncoder;

import javax.sql.DataSource;

//@Configuration
//@EnableWebSecurity
//@ImportResource("WEB-INF/applicationContext.xml")
public class SecurityConfig extends WebSecurityConfigurerAdapter {

  @Autowired
  DataSource dataSource;

//  @Autowired
//  private UserServiceImpl userService;

//  @Bean
  @Autowired
  public PasswordEncoder encoder() {
    return new BCryptPasswordEncoder();
  }

  @Bean
  public DaoAuthenticationProvider authProvider() {
    DaoAuthenticationProvider authProvider = new DaoAuthenticationProvider();
//    authProvider.setUserDetailsService(userService);
    authProvider.setPasswordEncoder(encoder());
    return authProvider;
  }

  @Autowired
  public void configAuthentication(AuthenticationManagerBuilder auth) {
    try {
      auth.authenticationProvider(authProvider());
      auth.jdbcAuthentication().dataSource(dataSource)
          .usersByUsernameQuery("select username,password, enabled from users where username=?")
          .authoritiesByUsernameQuery("select username, role from user_roles where username=?");
    } catch (Exception e) {
      e.printStackTrace();
    }
  }

  @Override
  protected void configure(HttpSecurity security) throws Exception {

    security.formLogin().loginPage("/login")
        .usernameParameter("userId")
        .passwordParameter("password");

    security.formLogin().defaultSuccessUrl("/")
        .failureUrl("/login?error");

    security.exceptionHandling().accessDeniedPage("/login?accessDenied");

//    security.authorizeRequests()
//        .antMatchers("/").permitAll()
//        .antMatchers("/**/add").access("hasRole('ADMIN')")
//        .antMatchers("/**/market/**").access("hasRole('USER')");

    security.csrf().disable();

    security.authorizeRequests()
        .antMatchers("/hello").access("hasRole('ROLE_ADMIN')")
        .anyRequest().permitAll();
  }
}
